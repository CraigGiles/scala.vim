*scala.txt*	Plugin inserting package statements in Scala files

Author:  Craig Giles <http://www.gilesc.com>

Introduction ..................................... |scala-introduction|
Usage ............................................ |scala-usage|
Mappings ......................................... |scala-mappings|
Configuration .................................... |scala-configuration|
License .......................................... |scala-license|
Bugs ............................................. |scala-bugs|
Contributing ..................................... |scala-contributing|
Changelog ........................................ |scala-changelog|
Credits .......................................... |scala-credits|

This plugin is only available if 'compatible' is not set.

INTRODUCTION                    *scala-introduction* *scala*

This plugin was developed as a learning experience but filled a need for my
workflow. The code can be found on its github repository

USAGE ............................................ *scala-usage*

Usage of this plugin is straightforward. When editing a *.scala file you can
issue a *:ScalaInsertPackage* command to append the package to the top of the
current buffer.

MAPPINGS ......................................... *scala-mappings*

There are no mappings associated with this plugin. To create a mapping simply
issue a new mapping to :ScalaInsertPackage<CR>

CONFIGURATION .................................... *scala-configuration*

There are two configuration options for `scala`.

    *g:scala_package_prefix* - Default: `[ "main", "test", "it", "bt", "fun" ]`

g:scala_package_prefix is a list of directories which can contain scala files
within the `src/<PREFIX>/scala` folder structure. Typical maven structures
will have a `src/main/scala` and `src/test/scala` but adding your own scopes
for testing (`it` is a typical one) should work with this plugin as well as
long as they're included in the `g:scala_package_prefix` list.

    *g:scala_package_flat_package* - Default:` 1`

`g:scala_package_flat_package` allows a user to insert a single package
statement at the top of their buffer. Single package statements will look
like typical java / scala package statements:

    `package com.company.project.whatever`

When `g:scala_package_flat_package` is set to 0 it will issue multiple
package statements:

    `package com.company`
    `package project`
    `package whatever`

LICENSE .......................................... *scala-license*

This software is written and distributed with the MIT license.

BUGS ............................................. *scala-bugs*

Known issue with package objects not having the right package statement

CONTRIBUTING ..................................... *scala-contributing*

Bugs can be reported and the very latest development version can be retrieved
from GitHub. If you would like to contribute back, simply fork the project and
submit a pull request into the `master` branch:
    https://github.com/craiggiles/scala.vim
    git clone git://github.com/craiggiles/scala.vim

CHANGELOG ........................................ *scala-changelog*

    * `1.0.0` Initial version

CREDITS .......................................... *scala-credits*

This plugin is written and maintained by Craig Giles <http://www.gilesc.com>

Learning resources for writing this plugin can be attributed to many sources:

Learning Resources:
    Damian Conwey - Scripting the VIM editor:
        https://www.ibm.com/developerworks/library/l-vim-script-1/
    Steve Losh - Learn Vimscript the hard way:
        http://learnvimscriptthehardway.stevelosh.com
    Rico Sta. Cruz - Vimscript Functions Cheatsheet:
        http://ricostacruz.com/cheatsheets/vimscript-functions.html

Inspiration from:
    Damian Conway
    Tim Pope

 vim:tw=78:ts=8:ft=help:norl:
